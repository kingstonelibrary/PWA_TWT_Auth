




メール認証関連     参照元：「./参考URL/【認証】メール認証　 (Web編) その2.webloc」(https://blog.katsubemakito.net/firebase/firebase-authentication-email-web2)
ーーーーーーー
    まずは参照元のように認証ページとなるp.htmlと認証後のリダイレクト先success.htmlについてコピペ
    
    （Firebaseプロジェクトでの作業）
        ・GCMProjectの [設定] ページで、プロジェクトIDとウェブ API キーを取得する（scriptのconfigオブジェクト内）
        ・[Authentication] - [ログイン方法 ] で ”メール” を選択し、出たダイアログ内で「有効」ラジオボタンと「メールリンク（パスワードなしでログイン）」を有効にする
        
    （HTML内のscript編集）
        ・上で得たプロジェクトIDとウェブ API キーをp.html，success.htmlにセットする
        
    ログイン前にsuccess.htmlにアクセスすると”Not LogIn”となりページを保護できていることが確認できる

 PWA関連
ーーーーー

PWAとして認識されるための条件
１．HTTPS対応
２．manifest.json設置
３．Service Workerを有効にする

（注）192x192のpngアイコンが登録されていないと、ホーム画面に追加バナーが表示されないので注意

マニフェスト内の２つのプロパティー
  "start_url": "./?utm_source=homescreen",  PWAとしてアクセスしたことが分かるようにするため
  "display": "standalone"                   ブラウザの UI を非表示にすることができため

サービスワーカーを有効にする    service-worker.js

  self.addEventListener('install', function(e) {
    console.log('[ServiceWorker] Install');
  });

  self.addEventListener('activate', function(e) {
    console.log('[ServiceWorker] Activate');
  });

  self.addEventListener('fetch', function(event) {});   // 　← 現状では、この処理を書かないとService Workerが有効と判定されないようです

  ＋　index.html から manifest.json service-worker.js を呼び出す
      <script>
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('./service-worker.js').then( ...


GitHUB pages（リポジトリごとのページ）
ーーーーーー
    １．GitHUBにリポジトリを作成
    ２．ローカルにクローン     
    ３．制作・編集         ← ここでGUIによる操作ではなくて $ git checkout --orphan gh-pages とブランチを切れば、そのままCLIで作業できる
    ４．add、commit、push                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ５．GitHUB-[Settings]-[GitHUB Pages]-[Source] でmasterブランチを選んでSaveボタンをクリック
    ６．これでmasterブランチの内容が GitHub Pages として公開されるようになる



PWA注意点
        
    ユーザがPWAをインストして以降にページを更新した場合、
    ユーザが端末でPWAを起動しただけでは反映されず、引っ張っての操作による更新でないとダメ。
    またPWAインスト後、最初の起動時にはネット接続が必要とのダイアログが出る ??